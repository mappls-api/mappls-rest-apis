openapi: 3.0.3
info:
  title: Address Analytics API
  description: >-
    <strong>(erstwhile Address Standardization API)</strong><br><br>
    This APIs follow OAuth2 based security. **To know more on how to create your authorization tokens, please use our authorization token URL. More details available**  [here](https://github.com/mappls-api/mappls-rest-apis/tree/main/mappls-token-generation-api).<br><br>The API leverages OAuth 2.0 based security. Hence, the developer would need to send a request for access token using their client_id and client_secret to the OAuth API. Once validated from the OAuth API, the access_token and the token_type need to be sent as Authorization header with the value: "{`token_type`} {`access_token`}”. <br><strong>Authorization</strong>: `token_type` `access_token`.<br><br> **Note**: <ol> <li> The response listed in the below documentation is ONLY indicative of the overall capabilities of Mappls's Search APIs. </li><li> Not all response parameters mentioned in the below documentation is assured to be present in all the use-cases. The response of any of the below search API is thus, dependent on the use-case agreed upon between Mappls & it's API consumer. </i><li> For any further clarifications on what all of the response structure is available for your use case, please contact your business relationship manager or contact Mappls API support.</li><li> <strong>PREMIUM APIs/Parameters</strong> are not available for evalulation on signup. To get access, please contact API Support.</li></ol>
  termsOfService: 'https://about.mappls.com/api/terms-&-conditions'
  version: 1.0.0
  license:
    name: Mappls License Key Signup
    url: https://about.mappls.com/api/
  contact:
    name: Mappls API Support
    email: apisupport@mappls.com
    url: https://about.mappls.com/api/
servers:
  - url: 'https://atlas.mappls.com'
    description: 'Live Prod server for OAuth 2 based APIs'
security: 
  - BearerAuth: []
paths:
  /api/places/addressAnalytics:
      get:
        tags:
          - Address Analytics API
        description: >-
          MapmyIndia's Address Analytics API is a parsing and standardisation engine enabling a complete flow of address cleansing, extraction, validation and standardisation activities.<br><br>
          The engine is trained on MapmyIndia’s Comprehensive Address Directory. Address directory is a unified data product representing India addresses at different level of granularity while keeping the hierarchical sanctity of each address. This API supports modular functions (cleansing / parsing / standardization) to utilize the workflow as per the business needs.<br><br>This APIs follow OAuth2 based security. **To know more on how to create your authorization tokens, please use our authorization token URL. More details available**  [here](https://github.com/mappls-api/mappls-rest-apis/tree/main/mappls-token-generation-api).
          <p style=text-align:right><strong><a href="https://mmi.mapmyindia.com/api/addressparser_demo/">Live Demo</a> </p>
        summary: >-
          Address Analytics API
        operationId: WoodpeckerAPI
        servers:
        - url: https://atlas.mappls.com
          description: 'Live Prod server for OAuth 2 based APIs'
        parameters:
          # - name: Authorization
          #   in: header
          #   description: >-
          #     Authorization header with the value: “{token_type} {access_token}”. <br> Please generate your token from token generation API before calling this API.
          #   required: true
          #   allowEmptyValue: false
          #   schema:
          #     type: string
          #   example: "bearer 0XXXXXXf-dXX0-4XX0-8XXa-eXXXXXXXXXX6"
          - name: address
            in: query
            description: 'The full human readable address that needs to be cleansed, parsed and standardized.'
            schema:
              type: string
            allowEmptyValue: false
            required: true
            example: '237 Okhla industrial estate phase 3 new Delhi, Delhi 110020'          
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WoodpeckerResults'
          '204':
            description: Not found
          '400':
            description: Bad request
          '401':
            description: API access denied
          '403':
            description: Forbidden
          '500':
            description: Something went wrong
          '503':
            description: Internal server error
        deprecated: false
components:
  schemas:
    WoodpeckerResults:
      title: Woodpecker Result
      description: The result object which contains the Address Analytics API results.
      type: object
      required: 
        - inputAddress
        - parsedData
        - standardizedData
      properties:
        inputAddress:
          type: string
          description: Address given by the user in the request.
          format: string
          example: 'Hannah Sen Cottage, Lady Irwin College Campus, Sikandra Road, Mandi House, New Delhi 110001'
        parsedData:
          $ref: '#/components/schemas/parsedData'
        standardizedData:
          $ref: '#/components/schemas/WP3'
    parsedData:
      title: parsedData object
      description: >-
        The result object which contains the Address Parsing results.
      type: object
      required:
        - formattedAddress
        - remainingAddress
        - parsedTokens       
      properties:
        formattedAddress:
          type: string
          description: Concatenated sequence of the parsed tokens.
          format: string
          example: 'Hannah Sen Cottage, Sikandra Road, Lady Irwin College Campus, New Delhi, 110001'
        remainingAddress:
          type: string
          description: Part of input address left after tagging the token information.
          format: string
          example: ''
        parsedTokens:
          type: array
          items:
            $ref: '#/components/schemas/WP2' 
          example: 
            - token: 'Mandi House;Hannah Sen Cottage'
              tokenType: 'poi/buildingName' 
            - token: 'Sikandra Road'
              tokenType: 'street'
            - token: 'Lady Irwin College Campus'
              tokenType: 'neighbourhood' 
            - token: 'New Delhi'
              tokenType: 'city'
            - token: '110001'
              tokenType: 'pincode'                    
    WP2:
      title: tokens and token type
      description: The address token information tagged from the provided input address, if any are found.
      type: object
      required:
        - token
        - tokenType
      properties:
        token:
          type: string
          description: 'The value(s) of the parsed address component. If an address token has more than one value, they are separated by a semicolon (";").'
          format: string
        tokenType:
          type: string
          description: 'the type of the token for this address component. Token type can belong to any one of the following types:'
          format: string
          enum: ['careOf','floor','buildingNumber','poi/buildingName','street','landmark','neighbourhood','village','postOffice','subDistrict','district','city','state','pincode','country']
    WP3:
      title: standardizedData Object
      description: The result object which contains the standardized Data results.
      type: object
      required:
        - formattedAddress
        - remainingAddress
        - standardizedTokens
      properties:
        formattedAddress:
          type: string
          description: Concatenated sequence of the parsed and standardized tokens.
          format: string
          example: 'Hannah Sen Cottage, Sikandra Road, Mandi  Lady Irwin College Campus, New Delhi, Delhi, 110001'
        remainingAddress:
          type: string
          description: Part of input address left after tagging the admin and other information.
          format: string
          example: 'Campus House'
        standardizedTokens:
          type: array
          items:
            $ref: '#/components/schemas/WP4' 
          example: 
            - token: 'Hannah Sen Cottage'
              tokenType: 'poi/buildingName' 
            - token: 'Sikandra Road'
              tokenType: 'street'
            - token: '110001'
              tokenType: 'pincode'
            - token: 'Mandi; Lady Irwin College Campus'
              tokenType: 'locality' 
            - token: 'New Delhi'
              tokenType: 'city'
            - token: 'Delhi'
              tokenType: 'state'
    WP4:
      title: tokens and token type
      description: The information tagged, standardized/corrected from the input address as well as additional information in the form of missing components(if applicable) while validating the address.
      type: object
      required:
        - token
        - tokenType
      properties:
        token:
          type: string
          description: 'The value(s) of the parsed address component. If an address token has more than one value, they are separated by a semicolon (";").'
          format: string
        tokenType:
          type: string
          description: >-
            The type of the token for this address component.
            <br>
            Note: For `pincode` field: Standardized pincode information. It can have multiple value seperated by semicolon(";"). In case of multiple values, the first value indicates the parsed pincode as extracted from input address followed by the standardized pincode values.
            <br>Token type can belong to any one of the following types:
          format: string
          enum: ['careOf','floor','buildingNumber','poi/buildingName','street','landmark','subSubLocality','subLocality','locality',village','postOffice','subDistrict','district','city','state','pincode']
  securitySchemes:
    BearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: 'bearer 0XXXXXXf-dXX0-4XX0-8XXa-eXXXXXXXXXX6'